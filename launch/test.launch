<launch>
	<arg name="lidar_enable" default="false"/>
	<arg name="gnss_port" default="/dev/fitogether"/>
	<arg name="gnss_baudrate" default="115200"/>
	<arg name="odom_enable" default="false"/>
	<arg name="drive_enable" default="false"/>

	<node pkg="rosserial_python" type="serial_node.py" name="turtlebot3_core" output="screen">
		<param name="port" value="/dev/opencr"/>
		<param name="baud" value="115200"/>
		<param name="tf_prefix" value=""/>
	</node>

	<node pkg="turtlebot3_bringup" type="turtlebot3_diagnostics" name="turtlebot3_diagnostics" output="screen"/>

	<!-- <node name="controller" pkg="gnss_ros" type="course_tracking.py" output="screen"/> -->
	<node name="controller" pkg="gnss_ros" type="course_record.py" output="screen">
		<param name="gnss_port" value="$(arg gnss_port)"/>
		<param name="gnss_baudrate" value="$(arg gnss_baudrate)"/>
		<param name="odom_enable" value="$(arg odom_enable)"/>
		<param name="drive_enable" value="$(arg drive_enable)"/>
	</node>

	<group if="$(arg lidar_enable)">
		<node name="rplidarNode" pkg="rplidar_ros" type="rplidarNode" output="screen">
			<param name="serial_port" type="string" value="/dev/rplidar"/>
			<param name="serial_baudrate" type="int" value="256000"/>
			<param name="frame_id" type="string" value="laser"/>
			<param name="inverted" type="bool" value="false"/>
			<param name="angle_compensate" type="bool" value="true"/>
		</node>
	</group>

</launch>
