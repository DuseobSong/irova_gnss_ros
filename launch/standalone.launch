<launch>
    <arg name="opencr_port"         default="/dev/opencr"/>
    <arg name="opencr_baudrate"     default="115200"/>
    <arg name="multi_robot_name"    default=""/>

    <arg name="enable_gnss"         default="true"/>

    <group if="$(arg enable_gnss)">
        <arg name="gnss_port"       default="/dev/zed_f9p"/>
        <arg name="gnss_baudrate"   default="115200"/>
    </group>
    
    <arg name="lidar_port"          default="/dev/rplidar_c1"/>
    <arg name="lidar_baudrate"      default="460800"/>
    <arg name="lidar_frame_id"      default="base_scan"/>

    <arg name="model"               default="$(env TURTLEBOT3_MODEL)"/>

    <arg name="urdf_file"           default="$(find xacro)/xacro --inorder '$(find turtlebot3_description)/urdf/turtlebot3_$(arg model).urdf.xacro'"/>
    <param name="robot_description" command="$(arg urdf_file)"/>

    <node pkg="rosserial_python" type="serial_node.py" name="turtlebot3_core" output="screen" required="true">
        <param name="port"      value="$(arg opencr_port)"/>
        <param name="baud"      value="$(arg opencr_baudrate)"/>
        <param name="tf_prefix" value="$(arg multi_robot_name)"/>
    </node>

    <node pkg="turtlebot3_bringup" type="turtlebot3_diagnostics" name="turtlebot3_diagnostics" output="screen" required="true"/>

    <node pkg="rplidar_ros" type="rplidarNode" name="rplidarNode" output="screen" required="true">
        <param name="serial_port"       type="string"   value="$(arg lidar_port)"/>
        <param name="serial_baudrate"   type="int"      value="$(arg lidar_baudrate)"/>
        <param name="frame_id"          type="string"   value="$(arg lidar_frame_id)"/>
        <param name="inverted"          type="bool"     value="false"/>
        <param name="angle_compensate"  type="bool"     value="true"/>
        <param name="scan_frequency"    type="double"   value="10.0"/>
        <param name="scan_mode"         type="string"   value="Standard"/>
    </node>

    <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher" output="screen" required="true">
        <param name="publish_frequency" type="double" value="50.0"/>
        <param name="tf_prefix" value=""/>
    </node>

    <node pkg="joint_state_publisher" type="joint_state_publisher" name="joint_state_publisher" output="screen" required="true"/>

    <group if="$(arg enable_gnss)">
        <node pkg="irova_gnss_ros" type="zed_f9p_standalone.py" name="irova_gnss_node" output="screen" required="true">
        </node>
    </group>

</launch>
